<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tremor</title><link>/</link><description>Recent content on Tremor</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Jul 2021 11:04:54 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>LFX Spring Mentorship Experience Report - Support for the Syslog Protocol</title><link>/blog/2021-07-05-lfx-blog-nupur/</link><pubDate>Mon, 05 Jul 2021 11:04:54 +0000</pubDate><guid>/blog/2021-07-05-lfx-blog-nupur/</guid><description>Introduction Hey folks, I am Nupur Agrawal, a third year student at Indian Institute of Technology Roorkee. This blog describes my experience of contributing to Tremor, CNCF sandbox project in the 2021 spring chapter of LFX Mentorship Program, under the mentorship of Matthias Wahl, Anup Dhamala and Heinz Gies.
Project Abstract Tremor is an event processing system originally designed for the needs of platform engineering and infrastructure. It is built for the users that have a high message volume to deal with and want to build pipelines to process, route, or limit this event stream.</description></item><item><title>Jigyasa's LFX spring Mentorship experience report</title><link>/blog/2021-06-29t17-lfx-blog-jigyasa-gcloud/</link><pubDate>Tue, 29 Jun 2021 17:25:00 +0100</pubDate><guid>/blog/2021-06-29t17-lfx-blog-jigyasa-gcloud/</guid><description>Introduction Hello folks! I&amp;rsquo;m Jigyasa, a final-year computer science engineering student at Indira Gandhi Delhi Technical University for Women pursuing my bachelor&amp;rsquo;s in Technology. This blog is about my experience contributing to Tremor as part of the LFX Mentorship program.
Learning about Tremor Tremor is an event processing system for unstructured data with rich support for structural pattern matching, filtering, and transformation. It is built for users that have a high message volume to deal with and want to build pipelines to process, route, or limit this event stream.</description></item><item><title>Releasing Tremor v0.10!</title><link>/blog/2021-02-12-v010-release/</link><pubDate>Fri, 12 Feb 2021 17:25:00 +0100</pubDate><guid>/blog/2021-02-12-v010-release/</guid><description>Montage based upon photo by Ádám Berkecz on Unsplash
Summary This release is the last minor release before we start turning tremor into a truly distributed event processing and data distribution engine. We focused on small things that improve usability and ironed out some rough edges here and there.
TL;DR We extended our type system and codecs by the binary type. Elasticsearch offramp now supports Linked Transport. String interpolation done right, now with #{} instead of just {} Release now includes prebuilt binaries, DEB packages and RPMs New Release Artefacts To make your life easier installing and Tremor we added new release artefacts.</description></item><item><title>Releasing Tremor v0.9!</title><link>/blog/2020-10-16-v09-release/</link><pubDate>Fri, 16 Oct 2020 19:30:00 +0000</pubDate><guid>/blog/2020-10-16-v09-release/</guid><description>Summary Tremor is an open source event processing and data distribution engine designed to interpose or intercept data in complex systems primarily to inject quality of service, correct data flows and to enrich or support complex traffic shaping, routing and load-balancing based on contextual, situational or content derived dynamic conditions.
Tremor has a powerful ETL language designed for flexibly pattern matching structured data such as JSON efficiently (SIMD-accelerated), and an easy to configure declarative flow-based SQL language designed for rich JSON-like data to describe data processing and data flow graphs with declarative QoS constraints.</description></item><item><title>To async or not to async</title><link>/blog/2020-08-06-to-async-or-not-to-async/</link><pubDate>Thu, 06 Aug 2020 04:02:00 +0000</pubDate><guid>/blog/2020-08-06-to-async-or-not-to-async/</guid><description>With the upcoming tremor release, 0.9.0, we&amp;rsquo;re moving from threads as a basis for ramps and pipelines to async tasks.
Let&amp;rsquo;s talk about why this is significant, what is changing, and how the architecture is changing.
Note that this is not a comprehensive treatise on threads or async tasks.
The Tremor That Was (threads) Threads are a basic building block of programs that execute multiple pieces of code concurrently. The operating system is responsible for coordinating across competing resource demands.</description></item><item><title>Rust &amp; Tell Berlin March 2020</title><link>/blog/2020-03-31-rust-and-tell/</link><pubDate>Tue, 31 Mar 2020 18:19:00 +0000</pubDate><guid>/blog/2020-03-31-rust-and-tell/</guid><description>We had the great pleasure of spending some time with the crowd of Rust &amp;amp; Tell today. At the meetup, we got the chance to share some of the stories of tremor and Event Processing Cartography. Long story short, if you&amp;rsquo;re curious, the talk was recorded (we&amp;rsquo;ll add the link later), and we got the slides right here!</description></item><item><title>Improving our influx parser - a story in four acts</title><link>/blog/influx-perf/</link><pubDate>Fri, 06 Mar 2020 10:08:00 +0000</pubDate><guid>/blog/influx-perf/</guid><description>Influx parsing performance Yesterday we spent the day on a report that our influx parser was slow, it turns out it indeed was.
This is an exciting topic as just a few days ago we gave a talk at BoBKonf 2020 on this topic so this is a great opportunity to show some of the topics and our process in action.
All the topics in this blog are links, the main one above this text is to the pull request, the titles of each section links to the commit that implements the topic discussed.</description></item><item><title>Tremor is now Open Source</title><link>/blog/welcome/</link><pubDate>Sat, 22 Feb 2020 20:02:02 +0000</pubDate><guid>/blog/welcome/</guid><description>The tremor project was released as an Open Source software project on 22nd February 2020 at 20:02:02.
Catch us at BOB2020 on the 28th February 2020 in Berlin where we will be talking about our usage of the Rust programming language to build high performance and high density production systems with Tremor.</description></item><item><title>Talking To Other Systems</title><link>/getting-started/connectivity/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/connectivity/</guid><description>Concept In order to provide a general purpose event processing facility to a broad base of applications, tremor separates processing from connectivity and distribution.
Tremor further separates the syntax of external formats from the implied value type semantics that are useful for filtering, processing, transforming, aggregating or otherwise deriving synthetic events from streams of data ingested by tremor processes.
As tremor is primarily an event processing system we refer to connections to external systems that are logically upstream of tremor as Onramps.</description></item><item><title>Understanding Data</title><link>/getting-started/codecs/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/codecs/</guid><description>Concept Tremor connects to the external systems using connectors.
Connectors that integrate tremor with upstream systems from where tremor is typically ingesting data are called Onramps.
Connectors that integrate tremor with downstream systems where tremor is typically publishing or contributing data to are called Offramps.
Onramps and Offramps use codecs to transform the external wire form of connected system participants into a structured internal value type tremor understands semantically.
Tremor&amp;rsquo;s internal type system is JSON-like.</description></item><item><title>Starting Tremor for the first time</title><link>/getting-started/starting/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/getting-started/starting/</guid><description>Requirements While there are many ways to install Tremor, be it as a package or compiling it form source this quickstart guide will use a Docker image to make it as painless as possible to get a first instance of tremor running.
With that a running version of Docker on a system with an internet connection is required.
Get Tremor The simplest way to get tremor is downloading the Docker Image.</description></item><item><title>Tremor Applications</title><link>/getting-started/scripting/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/getting-started/scripting/</guid><description>Concept Tremor supports data processing through a directed acyclic graph based pipeline or workflow. Pipelines can be configured via a YAML syntax or via a structured query language.
Pipelines are a graph of operations through which events are routed depth first. Operations in tremor pipelines are pluggable and extensible.
For applications or algorithms that process one event at a time, such as data cleansing, enrichment, normalization, validation and transformation an ETL focused scripting language can be used to program the application logic.</description></item><item><title>Tremor Teams</title><link>/community/teams/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/community/teams/</guid><description>Tremors team structure is heaviley inspired and influenced by rusts governance model.
Moderation (mod) Helping uphold the code of conduct
Members Dan Rowe Jordan Chernev Natali Vlatko Core (core) Direction of the project, subteam leadership, cross-cutting concerns.
Members Anup Dhamala Darach Ennis Heinz Gies Matthias Wahl Architecture (arch) Overarching architectural concepts, pipeline and concurrency
Members Anup Dhamala Darach Ennis Heinz Gies Matthias Wahl Language (lang) Designing new language features</description></item><item><title>Good User Experience</title><link>/getting-started/tooling/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/tooling/</guid><description>IDE Integration With the tremor language server tremor comes with advanced support for editing Tremor Script and Tremor Query in both Visual Studio Code and VIM.
To install the tremor-language-server you require rust to be set up on your system and then can simply run cargo install tremor-language-server.
The VS Code extension is available on the Visual Studio Marketplace.
The VIM plugin can be installed from GitHub.
Informative Errors Making errors human-friendly: recently, this realisation has gained popularity in the programming community with languages like rust tyring to provide helpful error messages beyond a line number and a generic error.</description></item><item><title>Specialize Tremor Pipelines</title><link>/getting-started/specialize/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/specialize/</guid><description>Concept Some behaviour is either so performance critical or so specialized that it can&amp;rsquo;t or shouldn&amp;rsquo;t be expressed using Tremor Script.
The solution to this is custom operators. Unlike tremor script that is interpreted at run time they are written in rust and can take advantage of the rust ecosystem and natively compiled performance.
Operators Currently tremor supports the following Operators:
runtime::tremor grouper::bucket generic::backpressure generic::batch Some special Operators also exist</description></item><item><title>Quick Developer Install</title><link>/getting-started/install/</link><pubDate>Tue, 04 Feb 2020 14:01:00 +0100</pubDate><guid>/getting-started/install/</guid><description>Supported Platforms Select the operating system your are developing on.
Mac OS X Linux Windows TypeIs Supported? IDE SupportYes. Macvim or Visual Studio Code DevelopmentYes ProductionNo TypeIs Supported? IDE SupportYes. Vim ( out of the box ) or Visual Studio Code DevelopmentYes ProductionYes TypeIs Supported? IDE SupportYes DevelopmentYes ProductionAccepting contributions Setup an IDE / editor VIM Visual Studio Code Other Follow the instructions in the tremor-vim git repository, and ensure your `.</description></item><item><title>Tremor Team</title><link>/company/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/company/</guid><description/></item></channel></rss>